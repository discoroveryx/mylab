#!/usr/bin/python3
# -*- coding: utf-8 -*-

"""
changelog: mylab-docker
Release date: 2020-06-11
version: 2.0
"""

import datetime
import os
import sys
import json
from subprocess import call
from subprocess import check_output
import pprint
from shutil import copyfile

pp = pprint.PrettyPrinter(indent=4)


def uuid_generator():
    time_now = datetime.datetime.now().strftime("%d_%m_%Y_%H_%M")
    data = time_now
    data = data.upper()
    return data


config: dict = {}


def open_config():
    check_config = None
    try:
        f = open('mylab.json', 'r')
    except Exception:
        print('not found mylab.json')
        pass
    else:
        f_read = f.read()
        f.close()
        try:
            check_config = json.loads(f_read)
        except Exception:
            print('bad syntax mylab.json')
    return check_config


def get_config():
    config = open_config()
    if config is None:
        sys.exit()
    return config


def run_env():
    """Run env"""
    get_config()
    call([
        '/usr/bin/python3',
        '-m',
        'venv',
        '.pyenv',
    ])


def run_pip():
    """Run pip"""
    config = get_config()
    for pip_item in config['pip']:
        pip3_bin = os.path.join(os.getcwd(), '.pyenv', 'bin', 'pip3')
        print(pip3_bin, 'install', pip_item)
        call([
            pip3_bin,
            'install',
            pip_item,
        ])


def run_makemigrations():
    """Run makemigrations"""
    config = get_config()
    for i in os.listdir(config['name']):
        if os.path.isdir(os.path.join(config['name'], i)):
            print(i)
            call([
                os.path.join(os.getcwd(), '.pyenv', 'bin', 'python3'),
                '{}/manage.py'.format(config['name']),
                'makemigrations',
                '{}'.format(i),
            ])


def run_migrate():
    """Run migrate"""
    config = get_config()
    call([
        os.path.join(os.getcwd(), '.pyenv', 'bin', 'python3'),
        '{}/manage.py'.format(config['name']),
        'makemigrations',
    ])
    call([
        os.path.join(os.getcwd(), '.pyenv', 'bin', 'python3'),
        '{}/manage.py'.format(config['name']),
        'migrate',
    ])


def run_load():
    """Run load"""
    config = get_config()
    # na_dump_dir_path = os.path.join('/', config['dump'], config['name'], 'dump')
    na_dump_dir_path = os.path.join('/', config['dump'])
    # na_dump_dir_path = config['dump']
    # print(na_dump_dir_path)
    # sys.path.append(na_dump_dir_path)

    # print(os.path.join(os.getcwd(), config['name']))
    # # PROJECT_DIR = '/var/www/shop/'
    # PROJECT_DIR = os.path.join(os.getcwd(), config['name'])
    # if PROJECT_DIR not in sys.path:
    #     sys.path.append(PROJECT_DIR)

    # import django

    # os.environ.setdefault("DJANGO_SETTINGS_MODULE", "dj.settings")
    # django.setup()

    # from applist import app

    prepared_command = [
        os.path.join(os.getcwd(), '.pyenv', 'bin', 'python3'),
        # '{}/dumpapp/sort_app_models.py'.format(config['name']),
        '/home/git/mylab/sort_app_models.py',
        na_dump_dir_path,
    ]

    print(prepared_command)

    res = check_output(prepared_command)
    print(res)
    res = res.decode('utf-8')
    print(res)
    app_list = res.split(':')
    print(app_list)

    for i in app_list:
        print(i)
        xml_file_path = os.path.join('/', config['dump'], '%s.xml' % (i))
        print(xml_file_path)
        call([
            os.path.join(os.getcwd(), '.pyenv', 'bin', 'python3'),
            '{}/manage.py'.format(config['name']),
            'loaddata',
            '-v', '3',
            '--format=xml',
            xml_file_path,
        ])


def run_media():
    """Run media"""
    config = get_config()
    print(config['name'])
    copyfile('/home/git/mylab/replace_media_img.py', '/home/www/project/{}/replace_media_img.py'.format(config['name']))
    # copyfile('/home/git/mylab/sample.jpg', '/home/www/{}/sample.jpg'.format(config['name']))
    call([
        os.path.join(os.getcwd(), '.pyenv', 'bin', 'python3'),
        '{}/replace_media_img.py'.format(config['name']),
    ])


def run_perm():
    """Run perm"""
    get_config()
    call(['chmod', '-R', 'uog+rw', os.getcwd()])


def run_chpasswd_admin():
    """Run chpasswd admin"""
    config = get_config()
    call([
        os.path.join(os.getcwd(), '.pyenv', 'bin', 'python3'),
        '{}/manage.py'.format(config['name']),
        'changepassword',
        'admin'
    ])


def run_test():
    """Run tests"""
    config = get_config()
    call([
        os.path.join(os.getcwd(), '.pyenv', 'bin', 'python3'),
        '{}/manage.py'.format(config['name']),
        'test', '-v', '2',
    ])


def run_start():
    """Run start project"""
    config = get_config()
    #
    try:
        port = sys.argv[2]
    except Exception:
        port = '8001'
    #
    print('Running on: 127.0.0.1:%s' % (port))
    #
    call([
        os.path.join(os.getcwd(), '.pyenv', 'bin', 'python3'),
        '{}/manage.py'.format(config['name']),
        # 'runserver',
        'runserver_plus',
        '0.0.0.0:%s' % (port),
    ])


def run_manage():
    """Run manage"""
    config = get_config()
    # try:
    #     arg = sys.argv[2]
    # except Exception:
    #     sys.exit()
    command = [
        os.path.join(os.getcwd(), '.pyenv', 'bin', 'python3'),
        '{}/manage.py'.format(config['name']),
    ]

    for arg in sys.argv[2:]:
        command.append(arg)

    call(command)


def run_help():
    binex = 'mylab-docker'
    print('''# Quick use:
    - sudo {binex} build
    - sudo {binex} start
# Step by step use:
    - sudo {binex} install
    - sudo {binex} makemigrate
    - sudo {binex} load
    - sudo {binex} media
    - sudo {binex} perm
    - sudo {binex} test
    - sudo {binex} start
    - sudo {binex} dropdb
# Project run examples:
    * sudo {binex} start 8001
    * sudo {binex} manage runserver_plus 0.0.0.0:8001 --settings dj.settings'''.format(binex=binex))


if __name__ == "__main__":
    print('I am mylab, what do you mean?')
    run_help()
    for param in sys.argv:
        if param == "help":
            run_help()

        if param == "config":
            print(get_config())

        if param == "build":
            run_env()
            run_pip()
            # run_make_database()
            run_makemigrations()
            run_migrate()
            run_load()
            run_media()
            run_perm()
            # run_chpasswd_admin()

        if param == 'install':
            run_env()
            run_pip()

        if param == 'makemigrate':
            # run_make_database()
            run_makemigrations()
            run_migrate()

        if param == 'load':
            run_load()

        if param == 'media':
            run_media()

        if param == 'perm':
            run_perm()
            # run_chpasswd_admin()

        if param == "start":
            run_start()

        if param == "test":
            run_test()

        if param == "manage":
            run_manage()
